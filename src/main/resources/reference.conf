
# Parameters global to the build
build
{
    rootdirectory     = "target/native"
}

# Standard paths for gcc
Gcc.LinuxPC
{
    compilerCommon =
    {
        toolPaths           = ["/usr/bin"]
        includePaths        = []
        libraryPaths        = []
        ccExe               = "gcc"
        cxxExe              = "g++"
        archiver            = "ar"
        linker              = "g++"
        
        ccFlags             = ["-DLINUX", "-DGCC"]
        cxxFlags            = ["-DLINUX", "-DGCC"]
        linkFlags           = []
    }
    
    Debug   = ${Gcc.LinuxPC.compilerCommon}
    Release = ${Gcc.LinuxPC.compilerCommon}
    
    Debug
    {
        ccFlags     = ${Gcc.LinuxPC.compilerCommon.ccFlags} ["-g", "-DDEBUG"]
        cxxFlags    = ${Gcc.LinuxPC.compilerCommon.cxxFlags} ["-g", "-DDEBUG"]
    }
    
    Release
    {
        ccFlags     = ${Gcc.LinuxPC.compilerCommon.ccFlags} ["-O2", "-DRELEASE"]
        cxxFlags    = ${Gcc.LinuxPC.compilerCommon.cxxFlags} ["-O2", "-DRELEASE"]
    }
}

# Standard paths for clang

Clang.LinuxPC
{
    compilerCommon =
    {
        toolPaths           = ["/usr/bin"]
        includePaths        = ["/usr/include/x86_64-linux-gnu/c++/4.7/"]
        libraryPaths        = []
        ccExe               = "clang"
        cxxExe              = "clang++"
        archiver            = "ar"
        linker              = "clang++"
        
        ccFlags             = ["-DLINUX", "-DCLANG"]
        cxxFlags            = ["-DLINUX", "-DCLANG"]
        linkFlags           = []
    }
    
    Debug   = ${Clang.LinuxPC.compilerCommon}
    Release = ${Clang.LinuxPC.compilerCommon}
    
    Debug
    {
        ccFlags     = ${Clang.LinuxPC.compilerCommon.ccFlags} ["-g", "-DDEBUG"]
        cxxFlags    = ${Clang.LinuxPC.compilerCommon.cxxFlags} ["-g", "-DDEBUG"]
    }
    
    Release
    {
        ccFlags     = ${Clang.LinuxPC.compilerCommon.ccFlags} ["-O2", "-DRELEASE"]
        cxxFlags    = ${Clang.LinuxPC.compilerCommon.cxxFlags} ["-O2", "-DRELEASE"]
    }
}

# Standard paths for visual studio command line builds
VSCl.WindowsPC
{
    compilerCommon =
    {
        toolPaths       = ["c:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/Bin", "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/bin", "c:/Program Files (x86)/Microsoft Visual Studio 10.0/Common7/IDE"]
        includePaths    = ["c:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/Include", "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include"]
        libraryPaths    = ["c:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/Lib", "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/lib"]
        ccExe           = "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/bin/cl.exe"
        cxxExe          = "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/bin/cl.exe"
        archiver        = "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/bin/lib.exe"
        linker          = "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/bin/link.exe"
        
        ccFlags         = ["-DWIN32", "-DVSCL", "-DWINDOWS"]
        cxxFlags        = ["-DWIN32", "-DVSCL", "-DWINDOWS"]
        linkFlags       = []
    }
    
    Debug   = ${VSCl.WindowsPC.compilerCommon}
    Release = ${VSCl.WindowsPC.compilerCommon}
    
    Debug
    {
        ccFlags         = ${VSCl.WindowsPC.compilerCommon.ccFlags} ["-DDEBUG"]
        cxxFlags        = ${VSCl.WindowsPC.compilerCommon.cxxFlags} ["-DDEBUG"]
    }
    
    Release
    {
        ccFlags         = ${VSCl.WindowsPC.compilerCommon.ccFlags} ["-DRELEASE"]
        cxxFlags        = ${VSCl.WindowsPC.compilerCommon.cxxFlags} ["-DRELEASE"]
    }
}

